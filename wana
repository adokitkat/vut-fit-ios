#!/bin/sh
# Settings
POSIXLY_CORRECT=yes

# Vars
GZ=0
OPTION=0
SORTTYPE=0

# Functions
checkValidDate() {
    # $1 == $AFTER || $BEFORE
    if ! ( echo "$1" | grep -qEx '[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}\:[0-9]{2}\:[0-9]{2}' ); then
        (>&2 echo 'Error! Enter valid DATE format. Valid format is "YYYY-MM-DD HH:MM:SS"' )
        (>&2 echo "Usage: ./wana [filter flag - OPTIONAL] [command] [log [log2 [...]]]" )
        exit 1
    fi
}

checkValidIP() {
    # $1 == $IP
    if ! ( echo "$1" | grep -qEx '[0-9]{1,3}(\.[0-9]{1,3}){3}|([0-9A-Fa-f]{0,4}\:){1,7}[0-9A-Fa-f]{0,4}' ); then
        (>&2 echo "Error! Enter valid IP format. Valid formats are IPv4, IPv6 standard and IPv6 compact." )
        (>&2 echo "Usage: ./wana [filter flag - OPTIONAL] [command] [log [log2 [...]]]" )
        exit 1
    fi
}

dateVal() {

    timestamp=$(echo "$1" | awk '{
        
        if ($2 == "Jan") {$2 = "01"} 
        else if ($2 == "Feb") { $2 = "02" }
        else if ($2 == "Mar") { $2 = "03" }
        else if ($2 == "Apr") { $2 = "04" }
        else if ($2 == "May") { $2 = "05" }
        else if ($2 == "Jun") { $2 = "06" }
        else if ($2 == "Jul") { $2 = "07" }
        else if ($2 == "Aug") { $2 = "08" }
        else if ($2 == "Sep") { $2 = "09" }
        else if ($2 == "Oct") { $2 = "10" }
        else if ($2 == "Nov") { $2 = "11" }
        else if ($2 == "Dec") { $2 = "12" };

        print $3 $2 $1 $4 $5 $6;
        
        }')

    echo "$timestamp"
}

dateLoad() {
    date=$(echo "$1" | awk '{
        if ($2 == "Jan") {$2="01"} 
        else if ($2 == "Feb") {$2="02"}
        else if ($2 == "Mar") {$2="03"}
        else if ($2 == "Apr") {$2="04"}
        else if ($2 == "May") {$2="05"}
        else if ($2 == "Jun") {$2="06"}
        else if ($2 == "Jul") {$2="07"}
        else if ($2 == "Aug") {$2="08"}
        else if ($2 == "Sep") {$2="09"}
        else if ($2 == "Oct") {$2="10"}
        else if ($2 == "Nov") {$2="11"}
        else if ($2 == "Dec") {$2="12"};
        
        print $3"-"$2"-"$1"_"$4":00";
        }')
    echo "$date"
}

applyFlags() {

    if [ -n "$IP" ]; then
        TEXT=$( echo "$TEXT" | grep -E "$IP." )
    fi
    if [ -n "$URI" ]; then
        TEXT=$( echo "$TEXT" | grep -E "$URI." )
    fi
    
    if [ -n "$AFTER" ]; then
        aTMP=$(
            echo "$TEXT" | while read -r line; do
                date=$( echo "$line" | grep -Eo '([0-9]{2}\/[A-Za-z]{3}\/[0-9]{4}\:[0-9]{2}\:[0-9]{2}\:[0-9]{2})' | tr : ' ' | tr / ' ' )
                
                formattedDate=$(dateVal "$date")
                tmpAFTER=$( echo "$AFTER" | tr - ' ' | tr : ' ' | awk '{printf $3" "$2" "$1" "$4" "$5" "$6}')
                formattedAFTER=$(dateVal "$tmpAFTER")

                if [ "$formattedDate" -gt  "$formattedAFTER" ]; then
                    echo "$line"
                fi
            done
        )
        TEXT=$aTMP
    fi
    if [ -n "$BEFORE" ]; then
        bTMP=$(
            echo "$TEXT" | while read -r line; do
                date=$( echo "$line" | grep -Eo '([0-9]{2}\/[A-Za-z]{3}\/[0-9]{4}\:[0-9]{2}\:[0-9]{2}\:[0-9]{2})' | tr : ' ' | tr / ' ')
    
                formattedDate=$(dateVal "$date")
                tmpBEFORE=$( echo "$BEFORE" | tr - ' ' | tr : ' ' | awk '{printf $3" "$2" "$1" "$4" "$5" "$6}')
                formattedBEFORE=$(dateVal "$tmpBEFORE")

                if [ "$formattedDate" -lt  "$formattedBEFORE" ]; then
                    echo "$line"
                fi
            done
        )
        TEXT=$bTMP
    fi
}

list() {

    if [ "$OPTION" -gt 0 ]; then
    
        case "$OPTION" in

            1 )
                OUTPUT=$( 
                    echo "$1" | while read -r line; do
                        echo "$line" | awk '{print $1}' | grep -Ex '[0-9]{1,3}(\.[0-9]{1,3}){3}|([0-9A-Fa-f]{0,4}\:){1,7}[0-9A-Fa-f]{0,4}' | grep -Ex '[^"]+'
                    done | sort -u
                )
            ;;

            2 )
                OUTPUT=$(
                    echo "$1" | while read -r line; do
                        
                        ip=$( echo "$line" | awk '{print $1}' )
                        hostname=$( host "$ip" 2>/dev/null)
                        if ! ( echo "$hostname" | grep -Eq '(not found)|(reached)' ); then
                            out=$( echo "$hostname" | awk '{print $NF}' ) # DELETE THE LAST DOT come on # awk '{print substr($NF, 1, length($NF)-1)}'
                        else
                            out="$ip"
                        fi

                        echo "$out" | grep -Ex '[^"]+' 
                    done | sort -u
                )
            ;;

            3 )
                OUTPUT=$( 
                    echo "$1" | while read -r line; do

                        uri=$( echo "$line" | grep -Eo '(GET |POST )\/([^[:space:]]+)?' )
                        echo "$uri" | awk '{print $2}'
                    done | grep -E '^[^ ]' 
                )
            ;;

            * )
                echo "Error!"
                exit 1
            ;;

        esac

    else
        OUTPUT="$1"
    fi
}

hist() {

    case "$OPTION" in

            4 )
                OUTPUT=$( 
                    echo "$1" | while read -r line; do
                        echo "$line" | awk '{print $1}' | grep -Ex '[^"]+'
                    done
                )
            ;;

            5 )
                OUTPUT=$( 
                    echo "$1" | while read -r line; do
                        load=$( echo "$line" | grep -Eo '([0-9]{2}\/[A-Za-z]{3}\/[0-9]{4}\:[0-9]{2}\:[0-9]{2}\:[0-9]{2})' | tr : ' ' | tr / ' ' )
                        formattedLoad=$( dateLoad "$load" )
                        echo "$formattedLoad"
                    done
                )
            ;;

            * )
                echo "Error!"
                exit 1
            ;;
        esac
}

###############
 # MAIN CODE #
###############
# PARSING ARGS
## Filters
while true; do
    case "$1" in

        -a )
            checkValidDate "$2"
            AFTER="$2"
            shift 2
            ;;

        -b )
            checkValidDate "$2"
            BEFORE="$2"
            shift 2
            ;;

        -ip )
            checkValidIP "$2"
            IP="$2"
            shift 2
            ;;

        -uri )
            URI="$2"
            shift 2
            ;;

        * )
            break
            ;;
    esac
done

## Commands
while true; do
    case "$1" in

        list-ip )
            OPTION=1
            SORTTYPE=1
            shift 1
            break
            ;;

        list-hosts )
            OPTION=2
            SORTTYPE=1
            shift 1
            break
            ;;

        list-uri )
            OPTION=3
            SORTTYPE=1
            shift 1
            break
            ;;

        hist-ip )
            OPTION=4
            SORTTYPE=2
            shift 1
            break
            ;;

        hist-load )
            OPTION=5
            SORTTYPE=3
            shift 1
            break
            ;;

        * )
            break
            ;;
    esac
done

## Stdin
if [ -z "$1" ]; then TEXT=$(cat)

## Logs
else
    while true; do
        
        for log in $1; do
            ### Check if valid log and if GZ file
            #checkLog "$log"
            GZ=$( gzip -qt "$log" 2>/dev/null && echo "1" || echo "0" )

            ### GZ or not
            if [ "$GZ" -eq 0 ]; then
                TEXT="$TEXT $( cat "$log" )"
            else
                TEXT="$TEXT $( zcat "$log" )" # \\n
            fi
        done

        ### Handling more files
        if [ "$#" -eq 1 ]; then
            break
        else
            shift 1
        fi
    done
fi

# WHAT TO DO ~~~
applyFlags "$TEXT"

if [ "$OPTION" -gt 3 ]; then
    hist "$TEXT"
else 
    list "$TEXT"
fi

# PRINTING OUTPUT TO STDOUT
if [ "$SORTTYPE" -eq 1 ]; then         ### List
    echo "$OUTPUT" | sort -u

elif [ "$SORTTYPE" -eq 2 ]; then    ### Hist-IP
    echo "$OUTPUT" | sort | uniq -c | sort -rn | awk '{ printf $2 $3" ("$1"): "; for (i = 1; i <= $1; ++i) { printf "#" }; {print ""} }' | sed 's/_/ /'

elif [ "$SORTTYPE" -eq 3 ]; then  ### Hist-Load
    echo "$OUTPUT" | sort | uniq -c | awk '{ printf $2 $3" ("$1"): "; for (i = 1; i <= $1; ++i) { printf "#" }; {print ""} }' | sed 's/_/ /'

else
    echo "$OUTPUT"       ### Just print the log
fi

# Return SUCCESS
exit 0
